// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Event renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "lightblue",
      "borderColor": "darkgreen",
      "borderRadius": 5,
      "borderWidth": 2,
      "height": 95,
      "marginBottom": 15,
      "marginLeft": 20,
      "marginRight": 20,
      "padding": 5,
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 16,
        "marginBottom": 5,
      }
    }
  >
    DESCRIPTION
  </Text>
  <Text
    style={
      Object {
        "fontSize": 16,
        "marginBottom": 5,
      }
    }
  />
</View>
`;

exports[`Header renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "dodgerblue",
      "height": 150,
      "marginBottom": 25,
    }
  }
>
  <Image
    source={
      Object {
        "testUri": "../../../images/logo.png",
      }
    }
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "marginTop": 25,
        "resizeMode": "contain",
        "width": 350,
      }
    }
  />
</View>
`;

exports[`MyLargeButton renders correctly 1`] = `
<View
  style={
    Object {
      "flexDirection": "row",
      "justifyContent": "center",
      "marginBottom": 20,
    }
  }
>
  <View
    accessible={true}
    focusable={false}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "red",
        "borderRadius": 50,
        "opacity": 1,
        "padding": 12,
        "width": 200,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 16,
        }
      }
    />
  </View>
</View>
`;

exports[`MySmallButton renders correctly 1`] = `
<View
  style={
    Object {
      "flexDirection": "row",
      "justifyContent": "center",
      "marginBottom": 20,
    }
  }
>
  <View
    accessible={true}
    focusable={false}
    isTVSelectable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "dodgerblue",
        "borderRadius": 50,
        "opacity": 1,
        "padding": 12,
        "width": 100,
      }
    }
  >
    <Text
      style={
        Object {
          "color": "white",
          "fontSize": 16,
        }
      }
    />
  </View>
</View>
`;

exports[`MyTextBox renders correctly 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "height": 50,
      "marginBottom": 20,
      "marginLeft": 10,
      "marginRight": 10,
    }
  }
>
  <TextInput
    allowFontScaling={true}
    onChangeText={[Function]}
    rejectResponderTermination={true}
    style={
      Object {
        "backgroundColor": "white",
        "borderColor": "grey",
        "borderRadius": 50,
        "borderWidth": 2,
        "fontSize": 16,
        "padding": 10,
        "paddingLeft": 20,
        "width": 300,
      }
    }
    underlineColorAndroid="transparent"
  />
</View>
`;

exports[`Schedule renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <View
      style={
        Object {
          "backgroundColor": "dodgerblue",
          "height": 150,
          "marginBottom": 25,
        }
      }
    >
      <Image
        source={
          Object {
            "testUri": "../../../images/logo.png",
          }
        }
        style={
          Object {
            "alignItems": "center",
            "justifyContent": "center",
            "marginTop": 25,
            "resizeMode": "contain",
            "width": 350,
          }
        }
      />
    </View>
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      numColumns={1}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
    <View
      style={
        Object {
          "flexDirection": "row",
          "justifyContent": "center",
          "marginBottom": 20,
        }
      }
    >
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "red",
            "borderRadius": 50,
            "opacity": 1,
            "padding": 12,
            "width": 200,
          }
        }
      >
        <Text
          style={
            Object {
              "color": "white",
              "fontSize": 16,
            }
          }
        >
          Logout
        </Text>
      </View>
    </View>
  </RCTSafeAreaView>
</View>
`;
